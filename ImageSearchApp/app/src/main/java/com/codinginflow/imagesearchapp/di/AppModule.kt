package com.codinginflow.imagesearchapp.di

import com.codinginflow.imagesearchapp.api.UnsplashApi
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.components.ApplicationComponent
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import javax.inject.Singleton

@Module//to turn this into a dagger module - instruction for dagger. Dagger will look where it can find, for example, how to create an API instance
@InstallIn(ApplicationComponent::class)//ApplicationComponent is a class automatically generated by dagger -> says that we want to scope this object to the application
object AppModule {

    @Provides//turn this into a dagger provide method -> tell dagger how to create an object: Retrofit
    @Singleton//single bc if there are more, it's a waste of memory
    fun provideRetrofit(): Retrofit =//naming convention: provide+the_name_of_the_object_we_want_to_return
        //instantiate the Retrofit object
        Retrofit.Builder()
            //call different methods on the Builder to set it up
            .baseUrl(UnsplashApi.BASE_URL)//passed the BASE_URL constant we created in the companion object earlier
            .addConverterFactory(GsonConverterFactory.create())//says that we want to use json as the converter for this Retrofit instance
                //Gson: library that knows how to turn json strings into corresponding Kotlin representation
            .build()//instantiate this Retrofit instance

    @Provides
    @Singleton
    //responsible for returning an instance of our API interface
    //in order to create an API instance, we need a Retrofit object
    //since we have already told dagger how to create a Retrofit object, we can declare it as a parameter like below
    fun provideUnsplashApi(retrofit: Retrofit): UnsplashApi =
        retrofit.create(UnsplashApi::class.java)//syntax to create one of these java class type

}